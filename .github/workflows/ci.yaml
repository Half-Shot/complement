name: Tests

on:
  push:
    branches: [ 'master' ]
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: sudo apt-get -qq install libolm-dev
      - uses: golangci/golangci-lint-action@v2
        with:
          version: v1.33
          args: ./internal/... ./tests/... 

  complement:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # ensure if synapse fails we keep running dendrite and vice-versa
      matrix:
        include:
          - homeserver: Synapse
            tags: synapse_blacklist,msc2403,msc3083
            default_branch: develop

          - homeserver: Dendrite
            tags: msc2836 dendrite_blacklist
            default_branch: master

    steps:
      - uses: actions/checkout@v2

      # TODO: Make a shell script to install all Complement deps and use that here and in the Dockerfile
      # Similar steps as dockerfiles/ComplementCIBuildkite.Dockerfile but on the host. We need
      # to do this so we can _be_ the host when running Complement so we can snaffle all the ports. If
      # we run Complement _in_ Docker then we can't -p all high numbered ports which then breaks federation
      # servers which listen on random high numbered ports.
      - name: "Install Complement Dependencies"
        # We don't need to install Go because it is included on the Ubuntu 20.04 image:
        # See https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md specifically GOROOT_1_17_X64
        run: |
          sudo apt-get update && sudo apt-get install -y libolm3
          echo "$GOROOT_1_17_X64/bin" >> $GITHUB_PATH
          go get github.com/haveyoudebuggedit/gotestfmt/v2/cmd/gotestfmt@latest


      - name: "Checkout corresponding ${{ matrix.homeserver }} branch"
        # This is only done for Synapse since Dendrite's docker file pulls in
        # the Dendrite sources directly.
        if: ${{ matrix.homeserver == 'Synapse' }}
        shell: bash
        run: |
          mkdir -p homeserver
          # Attempt to use the version of the homeserver which best matches the
          # current build. Depending on whether this is a PR or release, etc. we
          # need to use different fallbacks.
          #
          # 1. Check if there's a similarly named branch (GITHUB_HEAD_REF for pull
          #    requests, otherwise GITHUB_REF), but if this is the default complement
          #    branch, use the default homeserver branch.
          # 2. Use the default homeserver branch.
          for BRANCH_NAME in "$GITHUB_HEAD_REF" "${GITHUB_REF#refs/heads/}" "${{ matrix.default_branch }}"; do
            # Skip empty branch names and merge commits.
            if [[ -z "$BRANCH_NAME" || $BRANCH_NAME =~ ^refs/pull/.* ]]; then
              continue
            fi

            # If this is complement's default branch, use the homeserver's default branch.
            if [[ "$BRANCH_NAME" == "master" ]]; then
              BRANCH_NAME="${{ matrix.default_branch }}"
            fi

            (wget -O - "https://github.com/matrix-org/${{ matrix.homeserver }}/archive/$BRANCH_NAME.tar.gz" | tar -xz --strip-components=1 -C homeserver) && break
          done

      # Build initial homeserver image
      - run: docker build -t matrixdotorg/synapse:latest -f docker/Dockerfile .
        # We only do this for Synapse since Dendrite's docker file pulls in
        # the Dendrite sources directly (instead of being based on a previously
        # built docker image).
        if: ${{ matrix.homeserver == 'Synapse' }}
        working-directory: homeserver

      - run: docker build -t homeserver -f dockerfiles/${{ matrix.homeserver }}.Dockerfile dockerfiles/
      - run: export PATH=$PATH:/usr/local/go/bin && set -o pipefail && cd complement-master && go test -p 2 -v -json -tags "${{ matrix.tags }}" ./tests/... 2>&1 | gotestfmt
        shell: bash # required for pipefail to be A Thing. pipefail is required to stop gotestfmt swallowing non-zero exit codes
        env:
          COMPLEMENT_BASE_IMAGE: homeserver
